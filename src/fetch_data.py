import yfinance as yf
import pandas as pd
from datetime import datetime, timedelta
import os

def fetch_solana_data():
    """
    R√©cup√®re les donn√©es historiques de Solana depuis Yahoo Finance
    """
    print("=" * 60)
    print("üöÄ R√âCUP√âRATION DES DONN√âES SOLANA")
    print("=" * 60)
    print("üì• T√©l√©chargement depuis Yahoo Finance...")
    
    try:
        # SOL-USD = Solana sur Yahoo Finance
        # interval='1h' = donn√©es horaires
        # period='max' = maximum disponible
        sol = yf.Ticker("SOL-USD")
        
        # R√©cup√©ration donn√©es horaires (max ~730 jours = 2 ans)
        print("‚è≥ R√©cup√©ration des donn√©es horaires (2 ans max)...")
        df_hourly = sol.history(period='730d', interval='1h')
        
        if df_hourly.empty:
            print("‚ùå Aucune donn√©e horaire disponible")
            return None
        
        # Nettoyage et renommage
        df_hourly = df_hourly.reset_index()
        df_hourly = df_hourly.rename(columns={
            'Datetime': 'timestamp',
            'Open': 'open',
            'High': 'high',
            'Low': 'low',
            'Close': 'price',
            'Volume': 'volume'
        })
        
        # S√©lection des colonnes importantes
        df_hourly = df_hourly[['timestamp', 'open', 'high', 'low', 'price', 'volume']]
        df_hourly.set_index('timestamp', inplace=True)
        
        # Suppression des valeurs manquantes
        df_hourly = df_hourly.dropna()
        
        print(f"‚úÖ Donn√©es horaires r√©cup√©r√©es : {len(df_hourly)} points")
        print(f"üìÖ P√©riode : {df_hourly.index[0]} √† {df_hourly.index[-1]}")
        
        # R√©cup√©ration donn√©es journali√®res (max disponible)
        print("\n‚è≥ R√©cup√©ration des donn√©es journali√®res (historique complet)...")
        df_daily = sol.history(period='max', interval='1d')
        
        if not df_daily.empty:
            df_daily = df_daily.reset_index()
            df_daily = df_daily.rename(columns={
                'Date': 'timestamp',
                'Open': 'open',
                'High': 'high',
                'Low': 'low',
                'Close': 'price',
                'Volume': 'volume'
            })
            df_daily = df_daily[['timestamp', 'open', 'high', 'low', 'price', 'volume']]
            df_daily.set_index('timestamp', inplace=True)
            df_daily = df_daily.dropna()
            
            print(f"‚úÖ Donn√©es journali√®res r√©cup√©r√©es : {len(df_daily)} points")
            print(f"üìÖ P√©riode : {df_daily.index[0]} √† {df_daily.index[-1]}")
        
        return df_hourly, df_daily
    
    except Exception as e:
        print(f"‚ùå Erreur : {e}")
        return None, None

def save_data(df, filename):
    """Sauvegarde les donn√©es"""
    os.makedirs('data', exist_ok=True)
    filepath = os.path.join('data', filename)
    df.to_csv(filepath)
    print(f"üíæ Sauvegard√© : {filepath}")
    print(f"üì¶ Taille : {os.path.getsize(filepath) / 1024:.2f} KB")

def display_stats(df, name):
    """Affiche les statistiques"""
    print(f"\nüìä Statistiques {name} :")
    print(f"  ‚Ä¢ Nombre de points : {len(df)}")
    print(f"  ‚Ä¢ Prix min : ${df['price'].min():.2f}")
    print(f"  ‚Ä¢ Prix max : ${df['price'].max():.2f}")
    print(f"  ‚Ä¢ Prix moyen : ${df['price'].mean():.2f}")
    print(f"  ‚Ä¢ Prix actuel : ${df['price'].iloc[-1]:.2f}")
    print(f"  ‚Ä¢ Valeurs manquantes : {df.isnull().sum().sum()}")
    
    print(f"\nüìà Aper√ßu des derni√®res donn√©es :")
    print(df.tail())

def main():
    # R√©cup√©ration
    result = fetch_solana_data()
    
    if result is None:
        print("\n‚ùå √âchec complet de la r√©cup√©ration")
        return
    
    df_hourly, df_daily = result
    
    # Sauvegarde et stats pour donn√©es horaires
    if df_hourly is not None and not df_hourly.empty:
        print("\n" + "=" * 60)
        save_data(df_hourly, 'solana_hourly.csv')
        display_stats(df_hourly, "HORAIRES")
    
    # Sauvegarde et stats pour donn√©es journali√®res
    if df_daily is not None and not df_daily.empty:
        print("\n" + "=" * 60)
        save_data(df_daily, 'solana_daily.csv')
        display_stats(df_daily, "JOURNALI√àRES")
    
    print("\n" + "=" * 60)
    print("‚úÖ DONN√âES PR√äTES POUR L'ENTRA√éNEMENT !")
    print("=" * 60)
    print("\nüí° Prochaine √©tape : Pr√©paration des donn√©es pour le mod√®le")

if __name__ == "__main__":
    main()